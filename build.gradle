plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	flatDir {
		dirs 'lib'
	}

	// Cloth Config
	maven {
		url "https://maven.shedaniel.me/"
	}

	// Trinkets, Cloth Config
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

	// Trinkets
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}

	// Spell Power, Spell Engine
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	// Player Animator
	maven {
		name "KosmX's maven"
		url 'https://maven.kosmx.dev/'
	}

	// Gecko Lib
	maven {
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}

	// Mixin Extras
	maven {
		url 'https://jitpack.io'
	}

	// Owo
	maven {
		url 'https://maven.wispforest.io'
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Spell Engine
	modImplementation("maven.modrinth:spell-engine:${project.spell_engine_version}")

	// Spell Power
	modImplementation("maven.modrinth:spell-power:${project.spell_power_version}")

	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// BamCore
	modImplementation "dev.emi:trinkets:${project.trinkets_version}"

	// Trinkets
	modImplementation "lib:better_adventure_mod_core:0.0.1"

	// Gecko Lib
	modImplementation "software.bernie.geckolib:geckolib-fabric-1.20.1:${project.gecko_lib_version}"

	// Player Animation Lib
	modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim}")

	// Mixin Extras
	api("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
	annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")

	// Tiny Config
	implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")

	// Owo Lib
	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	// only if you plan to use owo-config
	annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"

	// include this if you don't want force your users to install owo
	// sentinel will warn them and give the option to download it automatically
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	// Immersive Portals Core
	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${project.q_misc_util_version}"){
		exclude(group: "net.fabricmc.fabric-api")
		transitive(false)
	}

	// Miscellaneous Utility Library
	modImplementation include("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${project.q_misc_util_version}"){
		exclude(group: "net.fabricmc.fabric-api")
		transitive(false)
	}

	// Cardinal Components
	modImplementation ("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modImplementation ("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")

	// Better Combat
	modImplementation "maven.modrinth:better-combat:${project.better_combat}"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}